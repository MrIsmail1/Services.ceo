generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ObjectStatus {
  ONLINE
  OFFLINE
  DELETED
}

enum ServiceBillingPlan {
  UNIT
  USAGE
  DIRECT
  MINUTE
  MENSUAL
  ANNUAL
}

enum ServicesAcceptedDevise {
  UNKNW
  CREDIT
  EUR
  USD
  GBP
}

enum ServiceSupplyForm {
  IRL
  ONLINE
  MIXED
}

enum ServiceUptakeType {
  INSTANT
  PERIODIC
  PRESTATION
}

enum RulesetStatus {
  DRAFT
  VALIDATED
  DISABLED
}

enum InputTypeEnum {
  TEXT
  TEXTAREA
  FILE
  SELECT
  MULTISELECT
  BOOLEAN
  NUMBER
  DATE
}

enum ConstraintScope {
  INPUT
  OUTPUT
  RUNTIME
}

enum ConstraintSeverity {
  SOFT_WARNING
  HARD_BLOCK
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  role          String           @default("CLIENT")
  services      Service[]
  executions    Execution[]
  versions      ServiceVersion[]
  agents        Agent[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Service {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  description    String?
  isActive       Boolean          @default(true)
  category       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  config         ServiceConfig?   @relation(fields: [configId], references: [id])
  configId       String?          @unique
  createdBy      User             @relation(fields: [createdById], references: [id])
  createdById    String
  executions     Execution[]
  versions       ServiceVersion[]

  @@index([slug])
  @@index([category])
  @@index([createdById])
}

model ServiceConfig {
  id              String   @id @default(uuid())
  service         Service?
  inputSchema     Json
  outputSchema    Json
  constraints     Json
  requirements    Json
  systemPrompt    String
  userPrompt      String
  uiConfig        Json?
  validationRules Json?
  fallbackConfig  Json?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Agent {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  model       String
  apiKey      String?
  apiUrl      String
  status      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceVersion {
  id            String   @id @default(uuid())
  service       Service  @relation(fields: [serviceId], references: [id])
  serviceId     String
  version       Int
  config        Json
  notes         String?
  publishedAt   DateTime @default(now())
  publishedBy   User     @relation(fields: [publishedById], references: [id])
  publishedById String

  @@unique([serviceId, version])
}

model Execution {
  id          String    @id @default(uuid())
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  status      String
  input       Json
  output      Json?
  metadata    Json?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  logs        Log[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([serviceId])
  @@index([userId])
  @@index([status])
}

model Log {
  id          String    @id @default(uuid())
  execution   Execution @relation(fields: [executionId], references: [id])
  executionId String
  level       String
  message     String
  timestamp   DateTime  @default(now())
  metadata    Json?

  @@index([executionId])
  @@index([timestamp])
}
