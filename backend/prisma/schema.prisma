// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Table principale des services
model Service {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  isActive    Boolean          @default(true)
  category    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  config      ServiceConfig    @relation(fields: [configId], references: [id])
  configId    String           @unique
  executions  Execution[]
  versions    ServiceVersion[]
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String

  @@index([slug])
  @@index([category])
  @@index([createdById])
}

// Configuration du service
model ServiceConfig {
  id              String   @id @default(uuid())
  service         Service?
  inputSchema     Json
  outputSchema    Json
  constraints     Json
  requirements    Json
  systemPrompt    String
  userPrompt      String
  uiConfig        Json?
  validationRules Json?
  fallbackConfig  Json?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Versions des services
model ServiceVersion {
  id            String   @id @default(uuid())
  service       Service  @relation(fields: [serviceId], references: [id])
  serviceId     String
  version       Int
  config        Json
  notes         String?
  publishedAt   DateTime @default(now())
  publishedBy   User     @relation(fields: [publishedById], references: [id])
  publishedById String

  @@unique([serviceId, version])
}

// Exécutions de service
model Execution {
  id          String    @id @default(uuid())
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  status      String
  input       Json
  output      Json?
  metadata    Json?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  logs        Log[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([serviceId])
  @@index([userId])
  @@index([status])
}

// Utilisateurs
model User {
  id             String           @id @default(uuid())
  email          String           @unique
  lastName       String?
  firstName      String?
  passwordHash String
  role           UserRole         @default(USER)
  services       Service[]
  executions     Execution[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ServiceVersion ServiceVersion[]
}

// Logs d'exécution
model Log {
  id          String    @id @default(uuid())
  execution   Execution @relation(fields: [executionId], references: [id])
  executionId String
  level       String
  message     String
  timestamp   DateTime  @default(now())
  metadata    Json?

  @@index([executionId])
  @@index([timestamp])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
