generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ObjectStatus {
  ONLINE
  OFFLINE
  DELETED
}

enum ServiceBillingPlan {
  UNIT
  USAGE
  DIRECT
  MINUTE
  MENSUAL
  ANNUAL
}

enum ServicesAcceptedDevise {
  UNKNW
  CREDIT
  EUR
  USD
  GBP
}

enum ServiceSupplyForm {
  IRL
  ONLINE
  MIXED
}

enum ServiceUptakeType {
  INSTANT
  PERIODIC
  PRESTATION
}

enum RulesetStatus {
  DRAFT
  VALIDATED
  DISABLED
}

enum InputTypeEnum {
  TEXT
  TEXTAREA
  FILE
  SELECT
  MULTISELECT
  BOOLEAN
  NUMBER
  DATE
}

enum ConstraintScope {
  INPUT
  OUTPUT
  RUNTIME
}

enum ConstraintSeverity {
  SOFT_WARNING
  HARD_BLOCK
}

model User {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  email         String         @unique
  passwordHash  String
  role          String
  services      Service[]      @relation("UserServices")
  organizations Organization[] @relation("UserOrganizations")
  agents        Agent[]
}


model Organization {
  organizationId     String                 @id @default(cuid())
  authorId           String
  author             User                   @relation("UserOrganizations", fields: [authorId], references: [id])
  ownerId            String?
  legalName          String?                @db.VarChar(64)
  brand              String?                @db.VarChar(32)
  currency           ServicesAcceptedDevise @default(EUR)
  vatNumber          String?                @db.VarChar(32)
  locationId         String?
  description        String?                @db.Text
  summary            String?                @db.Text
  advancedAttributes Json?
  services           Service[]
  createdAt          DateTime               @default(now())
}

model Service {
  serviceId            String             @id @default(cuid())
  authorId             String
  organizationId       String
  title                String?            @db.VarChar(64)
  summary              String?            @db.VarChar(254)
  description          String?            @db.Text
  mediaBannerId        String?
  termsAndConditionsId String?
  parentServiceId      String?
  tags                 String?
  locationId           String?
  price                Int
  legalVatPercent      Int
  lowerPrice           Int?
  upperPrice           Int?
  negotiable           Boolean?
  perimeter            Int?
  supplyType           ServiceSupplyForm  @default(IRL)
  uptakeForm           ServiceUptakeType  @default(INSTANT)
  billingPlan          ServiceBillingPlan @default(DIRECT)
  onlineService        Boolean?
  advancedAttributes   Json?
  slug                 String             @unique @db.VarChar(255)
  state                ObjectStatus       @default(OFFLINE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?

  organization     Organization @relation(fields: [organizationId], references: [organizationId])
  author           User         @relation("UserServices", fields: [authorId], references: [id])
  parentService    Service?     @relation("ParentService", fields: [parentServiceId], references: [serviceId])
  childrenServices Service[]    @relation("ParentService")

  ruleset Ruleset?
}

model Ruleset {
  rulesetId       String        @id @default(cuid())
  serviceId       String        @unique
  service         Service       @relation(fields: [serviceId], references: [serviceId])
  version         Int           @default(1)
  status          RulesetStatus @default(DRAFT)
  aiModel         String        @default("gpt-4")
  contextSystem   String        @db.Text
  instructionUser String        @db.Text
  promptTemplate  String        @db.Text
  language        String?       @default("fr")
  temperature     Float?        @default(0.7)
  topP            Float?        @default(0.95)
  maxTokens       Int?          @default(1024)
  fallbackEnabled Boolean?      @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?

  inputs      RulesetInput[]
  constraints RulesetConstraint[]
}

model RulesetInput {
  inputId   String        @id @default(cuid())
  rulesetId String
  ruleset   Ruleset       @relation(fields: [rulesetId], references: [rulesetId])
  key       String
  label     String
  type      InputTypeEnum
  required  Boolean       @default(true)
  regex     String?
  options   Json?
  help      String?
  position  Int?
}

model RulesetConstraint {
  constraintId String             @id @default(cuid())
  rulesetId    String
  ruleset      Ruleset            @relation(fields: [rulesetId], references: [rulesetId])
  scope        ConstraintScope
  key          String
  operator     String
  value        String
  severity     ConstraintSeverity
}

model Agent {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  model       String
  apiKey      String?
  apiUrl      String
  status      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  TESTING
}

model SimpleService {
  id          String        @id @default(cuid())
  name        String
  description String
  category    String
  status      ServiceStatus @default(INACTIVE)
  agentId     String
  model       String
  prompt      String
  inputs      Json
  outputs     Json
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  agent Agent @relation(fields: [agentId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
