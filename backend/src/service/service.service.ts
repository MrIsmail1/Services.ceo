import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateServiceDto } from './dto/create-service.dto';
import { Prisma } from '@prisma/client';
import { ServiceVersionService } from '../service-version/service-version.service';

@Injectable()
export class ServiceService {
    constructor(
        private prisma: PrismaService,
        private versioning: ServiceVersionService,
    ) {}

    async create(createServiceDto: CreateServiceDto) {
        const { 
            name, 
            description, 
            category, 
            authorId, 
            price,
            agent,
            model,
            systemPrompt,
            userPrompt,
            inputs,
            outputs,
            uiConfig,
            validationRules
        } = createServiceDto;

        // Prompts par d√©faut si non fournis
        const defaultSystemPrompt = systemPrompt || `Tu es un assistant IA sp√©cialis√© dans ${description || 'le traitement de donn√©es'}. 

R√àGLES IMPORTANTES :
1. Tu dois toujours √™tre utile et fournir des r√©ponses pr√©cises
2. Si tu estimes ne pas avoir assez de contexte pour r√©pondre, tu DOIS poser des questions pour clarifier
3. Sois interactif et guide l'utilisateur vers une r√©ponse compl√®te
4. Explique clairement ce que tu peux faire et ce dont tu as besoin
5. Ne donne jamais de r√©ponses vagues ou g√©n√©riques`;

        const defaultUserPrompt = userPrompt || `Traite les donn√©es suivantes et fournis un r√©sultat utile.

Si les informations fournies ne sont pas suffisantes pour r√©pondre de mani√®re pr√©cise, pose des questions pour clarifier :
- Quel est le contexte sp√©cifique ?
- Quel type de r√©sultat est attendu ?
- Y a-t-il des contraintes ou pr√©f√©rences particuli√®res ?

Donn√©es √† traiter : {input}`;

        const serviceConfig = await this.prisma.serviceConfig.create({
            data: {
                inputSchema: inputs ? (inputs as unknown as Prisma.InputJsonValue) : [],
                outputSchema: outputs ? (outputs as unknown as Prisma.InputJsonValue) : [],
                constraints: validationRules || {},
                requirements: [],
                systemPrompt: defaultSystemPrompt,
                userPrompt: defaultUserPrompt,
                uiConfig: uiConfig || {},
                metadata: { 
                    price,
                    agent,
                    model
                },
            },
        });

        return this.prisma.service.create({
            data: {
                name,
                slug: this.generateSlug(name),
                description,
                category: category || 'default',
                configId: serviceConfig.id,
                createdById: authorId,
            }
        });
    }

    private generateSlug(name: string): string {
        return name
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .trim()
            + '-' + Date.now();
    }

    async findAll(category?: string) {
        const where: Prisma.ServiceWhereInput = {};
        if (category) (where as any).category = category;
        return this.prisma.service.findMany({
            where,
            include: {},
        });
    }

    async findOne(id: string) {
        const service = await this.prisma.service.findUnique({
            where: { id },
            include: {},
        });
        if (!service) throw new NotFoundException('Service non trouv√©');
        return service;
    }

    async update(id: string, updateData: any) {
        await this.findOne(id);
        const updated = await this.prisma.service.update({
            where: { id },
            data: updateData,
            include: { config: true },
        });
        await this.versioning.createSnapshot(id);
        return updated;
    }

    async remove(id: string) {
        await this.findOne(id);
        return this.prisma.service.delete({ where: { id } });
    }

    async fixServiceConfigs() {
        console.log('üîß V√©rification et correction des configurations de services...');

        // R√©cup√©rer tous les services sans configuration
        const servicesWithoutConfig = await this.prisma.service.findMany({
            where: {
                configId: null
            },
            include: {
                config: true
            }
        });

        console.log(`üìä ${servicesWithoutConfig.length} services sans configuration trouv√©s`);

        for (const service of servicesWithoutConfig) {
            console.log(`\nüîß Traitement du service: ${service.name} (${service.id})`);

            // Cr√©er une configuration par d√©faut
            const defaultSystemPrompt = `Tu es un assistant IA sp√©cialis√© dans ${service.description || 'le traitement de donn√©es'}. 

R√àGLES IMPORTANTES :
1. Tu dois toujours √™tre utile et fournir des r√©ponses pr√©cises
2. Si tu estimes ne pas avoir assez de contexte pour r√©pondre, tu DOIS poser des questions pour clarifier
3. Sois interactif et guide l'utilisateur vers une r√©ponse compl√®te
4. Explique clairement ce que tu peux faire et ce dont tu as besoin
5. Ne donne jamais de r√©ponses vagues ou g√©n√©riques`;

            const defaultUserPrompt = `Traite les donn√©es suivantes et fournis un r√©sultat utile.

Si les informations fournies ne sont pas suffisantes pour r√©pondre de mani√®re pr√©cise, pose des questions pour clarifier :
- Quel est le contexte sp√©cifique ?
- Quel type de r√©sultat est attendu ?
- Y a-t-il des contraintes ou pr√©f√©rences particuli√®res ?

Donn√©es √† traiter : {input}`;

            const config = await this.prisma.serviceConfig.create({
                data: {
                    inputSchema: { type: 'object', properties: {} } as Prisma.InputJsonValue,
                    outputSchema: { type: 'object', properties: {} } as Prisma.InputJsonValue,
                    constraints: {} as Prisma.InputJsonValue,
                    requirements: [] as Prisma.InputJsonValue,
                    systemPrompt: defaultSystemPrompt,
                    userPrompt: defaultUserPrompt,
                    uiConfig: {} as Prisma.InputJsonValue,
                    metadata: {
                        version: '1.0.0',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        createdBy: service.createdById
                    } as Prisma.InputJsonValue
                }
            });

            // Associer la configuration au service
            await this.prisma.service.update({
                where: { id: service.id },
                data: { configId: config.id }
            });

            console.log(`‚úÖ Configuration cr√©√©e et associ√©e au service ${service.name}`);
        }

        // V√©rifier les configurations existantes
        const servicesWithConfig = await this.prisma.service.findMany({
            where: {
                configId: { not: null }
            },
            include: {
                config: true
            }
        });

        console.log(`\nüìä ${servicesWithConfig.length} services avec configuration:`);
        
        for (const service of servicesWithConfig) {
            const config = service.config;
            console.log(`\nüìã Service: ${service.name}`);
            console.log(`   - System Prompt: ${config?.systemPrompt ? '‚úÖ' : '‚ùå'} ${config?.systemPrompt?.substring(0, 50)}...`);
            console.log(`   - User Prompt: ${config?.userPrompt ? '‚úÖ' : '‚ùå'} ${config?.userPrompt?.substring(0, 50)}...`);
            
            // Si les prompts sont vides, les mettre √† jour
            if (!config?.systemPrompt || !config?.userPrompt) {
                const defaultSystemPrompt = config?.systemPrompt || `Tu es un assistant IA sp√©cialis√© dans ${service.description || 'le traitement de donn√©es'}. 

R√àGLES IMPORTANTES :
1. Tu dois toujours √™tre utile et fournir des r√©ponses pr√©cises
2. Si tu estimes ne pas avoir assez de contexte pour r√©pondre, tu DOIS poser des questions pour clarifier
3. Sois interactif et guide l'utilisateur vers une r√©ponse compl√®te
4. Explique clairement ce que tu peux faire et ce dont tu as besoin
5. Ne donne jamais de r√©ponses vagues ou g√©n√©riques`;

                const defaultUserPrompt = config?.userPrompt || `Traite les donn√©es suivantes et fournis un r√©sultat utile.

Si les informations fournies ne sont pas suffisantes pour r√©pondre de mani√®re pr√©cise, pose des questions pour clarifier :
- Quel est le contexte sp√©cifique ?
- Quel type de r√©sultat est attendu ?
- Y a-t-il des contraintes ou pr√©f√©rences particuli√®res ?

Donn√©es √† traiter : {input}`;

                await this.prisma.serviceConfig.update({
                    where: { id: config!.id },
                    data: {
                        systemPrompt: defaultSystemPrompt,
                        userPrompt: defaultUserPrompt
                    }
                });

                console.log(`   üîß Prompts mis √† jour`);
            }
        }

        return {
            message: 'Configurations corrig√©es',
            servicesWithoutConfig: servicesWithoutConfig.length,
            servicesWithConfig: servicesWithConfig.length
        };
    }
}
